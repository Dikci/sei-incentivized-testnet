// Code generated by cmd/cgo; DO NOT EDIT.

//line /root/go/pkg/mod/github.com/!cosm!wasm/wasmvm@v1.0.0/api/callbacks.go:1:1
package api

// Check https://akrennmair.github.io/golang-cgo-slides/ to learn
// how this embedded C code works.

/*
#include "bindings.h"

// typedefs for _cgo functions (db)
typedef GoError (*read_db_fn)(db_t *ptr, gas_meter_t *gas_meter, uint64_t *used_gas, U8SliceView key, UnmanagedVector *val, UnmanagedVector *errOut);
typedef GoError (*write_db_fn)(db_t *ptr, gas_meter_t *gas_meter, uint64_t *used_gas, U8SliceView key, U8SliceView val, UnmanagedVector *errOut);
typedef GoError (*remove_db_fn)(db_t *ptr, gas_meter_t *gas_meter, uint64_t *used_gas, U8SliceView key, UnmanagedVector *errOut);
typedef GoError (*scan_db_fn)(db_t *ptr, gas_meter_t *gas_meter, uint64_t *used_gas, U8SliceView start, U8SliceView end, int32_t order, GoIter *out, UnmanagedVector *errOut);
// iterator
typedef GoError (*next_db_fn)(iterator_t idx, gas_meter_t *gas_meter, uint64_t *used_gas, UnmanagedVector *key, UnmanagedVector *val, UnmanagedVector *errOut);
// and api
typedef GoError (*humanize_address_fn)(api_t *ptr, U8SliceView src, UnmanagedVector *dest, UnmanagedVector *errOut, uint64_t *used_gas);
typedef GoError (*canonicalize_address_fn)(api_t *ptr, U8SliceView src, UnmanagedVector *dest, UnmanagedVector *errOut, uint64_t *used_gas);
typedef GoError (*query_external_fn)(querier_t *ptr, uint64_t gas_limit, uint64_t *used_gas, U8SliceView request, UnmanagedVector *result, UnmanagedVector *errOut);

// forward declarations (db)
GoError cGet_cgo(db_t *ptr, gas_meter_t *gas_meter, uint64_t *used_gas, U8SliceView key, UnmanagedVector *val, UnmanagedVector *errOut);
GoError cSet_cgo(db_t *ptr, gas_meter_t *gas_meter, uint64_t *used_gas, U8SliceView key, U8SliceView val, UnmanagedVector *errOut);
GoError cDelete_cgo(db_t *ptr, gas_meter_t *gas_meter, uint64_t *used_gas, U8SliceView key, UnmanagedVector *errOut);
GoError cScan_cgo(db_t *ptr, gas_meter_t *gas_meter, uint64_t *used_gas, U8SliceView start, U8SliceView end, int32_t order, GoIter *out, UnmanagedVector *errOut);
// iterator
GoError cNext_cgo(iterator_t *ptr, gas_meter_t *gas_meter, uint64_t *used_gas, UnmanagedVector *key, UnmanagedVector *val, UnmanagedVector *errOut);
// api
GoError cHumanAddress_cgo(api_t *ptr, U8SliceView src, UnmanagedVector *dest, UnmanagedVector *errOut, uint64_t *used_gas);
GoError cCanonicalAddress_cgo(api_t *ptr, U8SliceView src, UnmanagedVector *dest, UnmanagedVector *errOut, uint64_t *used_gas);
// and querier
GoError cQueryExternal_cgo(querier_t *ptr, uint64_t gas_limit, uint64_t *used_gas, U8SliceView request, UnmanagedVector *result, UnmanagedVector *errOut);


*/
import _ "unsafe"

import (
	"encoding/json"
	"fmt"
	"log"
	"reflect"
	"runtime/debug"
	"unsafe"

	dbm "github.com/tendermint/tm-db"

	"github.com/CosmWasm/wasmvm/types"
)

// Note: we have to include all exports in the same file (at least since they both import bindings.h),
// or get odd cgo build errors about duplicate definitions

func recoverPanic(ret * /*line :54:24*/_Ctype_GoError /*line :54:33*/) {
	if rec := recover(); rec != nil {
		// This is used to handle ErrorOutOfGas panics.
		//
		// What we do here is something that should not be done in the first place.
		// "A panic typically means something went unexpectedly wrong. Mostly we use it to fail fast
		// on errors that shouldnâ€™t occur during normal operation, or that we arenâ€™t prepared to
		// handle gracefully." says https://gobyexample.com/panic.
		// And 'Ask yourself "when this happens, should the application immediately crash?" If yes,
		// use a panic; otherwise, use an error.' says this popular answer on SO: https://stackoverflow.com/a/44505268.
		// Oh, and "If you're already worrying about discriminating different kinds of panics, you've lost sight of the ball."
		// (Rob Pike) from https://eli.thegreenplace.net/2018/on-the-uses-and-misuses-of-panics-in-go/
		//
		// We don't want to import Cosmos SDK and also cannot use interfaces to detect these
		// error types (as they have no methods). So, let's just rely on the descriptive names.
		name := reflect.TypeOf(rec).Name()
		switch name {
		// These three types are "thrown" (which is not a thing in Go ðŸ™ƒ) in panics from the gas module
		// (https://github.com/cosmos/cosmos-sdk/blob/v0.45.4/store/types/gas.go):
		// 1. ErrorOutOfGas
		// 2. ErrorGasOverflow
		// 3. ErrorNegativeGasConsumed
		//
		// In the baseapp, ErrorOutOfGas gets special treatment:
		// - https://github.com/cosmos/cosmos-sdk/blob/v0.45.4/baseapp/baseapp.go#L607
		// - https://github.com/cosmos/cosmos-sdk/blob/v0.45.4/baseapp/recovery.go#L50-L60
		// This turns the panic into a regular error with a helpful error message.
		//
		// The other two gas related panic types indicate programming errors and are handled along
		// with all other errors in https://github.com/cosmos/cosmos-sdk/blob/v0.45.4/baseapp/recovery.go#L66-L77.
		case "ErrorOutOfGas":
			// TODO: figure out how to pass the text in its `Descriptor` field through all the FFI
			*ret = ( /*line :86:11*/_Ciconst_GoError_OutOfGas /*line :86:28*/)
		default:
			log.Printf("Panic in Go callback: %#v\n", rec)
			debug.PrintStack()
			*ret = ( /*line :90:11*/_Ciconst_GoError_Panic /*line :90:25*/)
		}
	}
}

type Gas = uint64

// GasMeter is a copy of an interface declaration from cosmos-sdk
// https://github.com/cosmos/cosmos-sdk/blob/18890a225b46260a9adc587be6fa1cc2aff101cd/store/types/gas.go#L34
type GasMeter interface {
	GasConsumed() Gas
}

/****** DB ********/

// KVStore copies a subset of types from cosmos-sdk
// We may wish to make this more generic sometime in the future, but not now
// https://github.com/cosmos/cosmos-sdk/blob/bef3689245bab591d7d169abd6bea52db97a70c7/store/types/store.go#L170
type KVStore interface {
	Get(key []byte) []byte
	Set(key, value []byte)
	Delete(key []byte)

	// Iterator over a domain of keys in ascending order. End is exclusive.
	// Start must be less than end, or the Iterator is invalid.
	// Iterator must be closed by caller.
	// To iterate over entire domain, use store.Iterator(nil, nil)
	Iterator(start, end []byte) dbm.Iterator

	// Iterator over a domain of keys in descending order. End is exclusive.
	// Start must be less than end, or the Iterator is invalid.
	// Iterator must be closed by caller.
	ReverseIterator(start, end []byte) dbm.Iterator
}

var db_vtable =  /*line :125:17*/_Ctype_Db_vtable /*line :125:28*/{
	read_db:   ( /*line :126:14*/_Ctype_read_db_fn /*line :126:26*/)(( /*line :126:28*/_Cgo_ptr(_Cfpvar_fp_cGet_cgo) /*line :126:37*/)),
	write_db:  ( /*line :127:14*/_Ctype_write_db_fn /*line :127:27*/)(( /*line :127:29*/_Cgo_ptr(_Cfpvar_fp_cSet_cgo) /*line :127:38*/)),
	remove_db: ( /*line :128:14*/_Ctype_remove_db_fn /*line :128:28*/)(( /*line :128:30*/_Cgo_ptr(_Cfpvar_fp_cDelete_cgo) /*line :128:42*/)),
	scan_db:   ( /*line :129:14*/_Ctype_scan_db_fn /*line :129:26*/)(( /*line :129:28*/_Cgo_ptr(_Cfpvar_fp_cScan_cgo) /*line :129:38*/)),
}

type DBState struct {
	Store KVStore
	// CallID is used to lookup the proper frame for iterators associated with this contract call (iterator.go)
	CallID uint64
}

// use this to create C.Db in two steps, so the pointer lives as long as the calling stack
//   state := buildDBState(kv, callID)
//   db := buildDB(&state, &gasMeter)
//   // then pass db into some FFI function
func buildDBState(kv KVStore, callID uint64) DBState {
	return DBState{
		Store:  kv,
		CallID: callID,
	}
}

// contract: original pointer/struct referenced must live longer than C.Db struct
// since this is only used internally, we can verify the code that this is the case
func buildDB(state *DBState, gm *GasMeter)  /*line :151:44*/_Ctype_Db /*line :151:48*/ {
	return  /*line :152:9*/_Ctype_Db /*line :152:13*/{
		gas_meter: (* /*line :153:16*/_Ctype_gas_meter_t /*line :153:29*/)(unsafe.Pointer(gm)),
		state:     (* /*line :154:16*/_Ctype_db_t /*line :154:22*/)(unsafe.Pointer(state)),
		vtable:    db_vtable,
	}
}

var iterator_vtable =  /*line :159:23*/_Ctype_Iterator_vtable /*line :159:40*/{
	next_db: ( /*line :160:12*/_Ctype_next_db_fn /*line :160:24*/)(( /*line :160:26*/_Cgo_ptr(_Cfpvar_fp_cNext_cgo) /*line :160:36*/)),
}

// An iterator including referenced objects is 117 bytes large (calculated using https://github.com/DmitriyVTitov/size).
// We limit the number of iterators per contract call ID here in order limit memory usage to 32768*117 = ~3.8 MB as a safety measure.
// In any reasonable contract, gas limits should hit sooner than that though.
const frameLenLimit = 32768

// contract: original pointer/struct referenced must live longer than C.Db struct
// since this is only used internally, we can verify the code that this is the case
func buildIterator(callID uint64, it dbm.Iterator) ( /*line :170:53*/_Ctype_iterator_t /*line :170:65*/, error) {
	idx, err := storeIterator(callID, it, frameLenLimit)
	if err != nil {
		return  /*line :173:10*/_Ctype_iterator_t /*line :173:22*/{}, err
	}
	return  /*line :175:9*/_Ctype_iterator_t /*line :175:21*/{
		call_id:        cu64(callID),
		iterator_index: cu64(idx),
	}, nil
}

//export cGet
func cGet(ptr * /*line :182:16*/_Ctype_db_t /*line :182:22*/, gasMeter * /*line :182:34*/_Ctype_gas_meter_t /*line :182:47*/, usedGas *cu64, key  /*line :182:68*/_Ctype_U8SliceView /*line :182:81*/, val * /*line :182:88*/_Ctype_UnmanagedVector /*line :182:105*/, errOut * /*line :182:115*/_Ctype_UnmanagedVector /*line :182:132*/) (ret  /*line :182:139*/_Ctype_GoError /*line :182:148*/) {
	defer recoverPanic(&ret)

	if ptr == nil || gasMeter == nil || usedGas == nil || val == nil || errOut == nil {
		// we received an invalid pointer
		return ( /*line :187:10*/_Ciconst_GoError_BadArgument /*line :187:30*/)
	}
	if !(*val).is_none || !(*errOut).is_none {
		panic("Got a non-none UnmanagedVector we're about to override. This is a bug because someone has to drop the old one.")
	}

	gm := *(*GasMeter)(unsafe.Pointer(gasMeter))
	kv := *(*KVStore)(unsafe.Pointer(ptr))
	k := copyU8Slice(key)

	gasBefore := gm.GasConsumed()
	v := kv.Get(k)
	gasAfter := gm.GasConsumed()
	*usedGas = (cu64)(gasAfter - gasBefore)

	// v will equal nil when the key is missing
	// https://github.com/cosmos/cosmos-sdk/blob/1083fa948e347135861f88e07ec76b0314296832/store/types/store.go#L174
	*val = newUnmanagedVector(v)

	return ( /*line :206:9*/_Ciconst_GoError_None /*line :206:22*/)
}

//export cSet
func cSet(ptr * /*line :210:16*/_Ctype_db_t /*line :210:22*/, gasMeter * /*line :210:34*/_Ctype_gas_meter_t /*line :210:47*/, usedGas * /*line :210:58*/_Ctype_uint64_t /*line :210:68*/, key  /*line :210:74*/_Ctype_U8SliceView /*line :210:87*/, val  /*line :210:93*/_Ctype_U8SliceView /*line :210:106*/, errOut * /*line :210:116*/_Ctype_UnmanagedVector /*line :210:133*/) (ret  /*line :210:140*/_Ctype_GoError /*line :210:149*/) {
	defer recoverPanic(&ret)

	if ptr == nil || gasMeter == nil || usedGas == nil || errOut == nil {
		// we received an invalid pointer
		return ( /*line :215:10*/_Ciconst_GoError_BadArgument /*line :215:30*/)
	}
	if !(*errOut).is_none {
		panic("Got a non-none UnmanagedVector we're about to override. This is a bug because someone has to drop the old one.")
	}

	gm := *(*GasMeter)(unsafe.Pointer(gasMeter))
	kv := *(*KVStore)(unsafe.Pointer(ptr))
	k := copyU8Slice(key)
	v := copyU8Slice(val)

	gasBefore := gm.GasConsumed()
	kv.Set(k, v)
	gasAfter := gm.GasConsumed()
	*usedGas = ( /*line :229:14*/_Ctype_uint64_t /*line :229:24*/)(gasAfter - gasBefore)

	return ( /*line :231:9*/_Ciconst_GoError_None /*line :231:22*/)
}

//export cDelete
func cDelete(ptr * /*line :235:19*/_Ctype_db_t /*line :235:25*/, gasMeter * /*line :235:37*/_Ctype_gas_meter_t /*line :235:50*/, usedGas * /*line :235:61*/_Ctype_uint64_t /*line :235:71*/, key  /*line :235:77*/_Ctype_U8SliceView /*line :235:90*/, errOut * /*line :235:100*/_Ctype_UnmanagedVector /*line :235:117*/) (ret  /*line :235:124*/_Ctype_GoError /*line :235:133*/) {
	defer recoverPanic(&ret)

	if ptr == nil || gasMeter == nil || usedGas == nil || errOut == nil {
		// we received an invalid pointer
		return ( /*line :240:10*/_Ciconst_GoError_BadArgument /*line :240:30*/)
	}
	if !(*errOut).is_none {
		panic("Got a non-none UnmanagedVector we're about to override. This is a bug because someone has to drop the old one.")
	}

	gm := *(*GasMeter)(unsafe.Pointer(gasMeter))
	kv := *(*KVStore)(unsafe.Pointer(ptr))
	k := copyU8Slice(key)

	gasBefore := gm.GasConsumed()
	kv.Delete(k)
	gasAfter := gm.GasConsumed()
	*usedGas = ( /*line :253:14*/_Ctype_uint64_t /*line :253:24*/)(gasAfter - gasBefore)

	return ( /*line :255:9*/_Ciconst_GoError_None /*line :255:22*/)
}

//export cScan
func cScan(ptr * /*line :259:17*/_Ctype_db_t /*line :259:23*/, gasMeter * /*line :259:35*/_Ctype_gas_meter_t /*line :259:48*/, usedGas * /*line :259:59*/_Ctype_uint64_t /*line :259:69*/, start  /*line :259:77*/_Ctype_U8SliceView /*line :259:90*/, end  /*line :259:96*/_Ctype_U8SliceView /*line :259:109*/, order ci32, out * /*line :259:128*/_Ctype_GoIter /*line :259:136*/, errOut * /*line :259:146*/_Ctype_UnmanagedVector /*line :259:163*/) (ret  /*line :259:170*/_Ctype_GoError /*line :259:179*/) {
	defer recoverPanic(&ret)

	if ptr == nil || gasMeter == nil || usedGas == nil || out == nil || errOut == nil {
		// we received an invalid pointer
		return ( /*line :264:10*/_Ciconst_GoError_BadArgument /*line :264:30*/)
	}
	if !(*errOut).is_none {
		panic("Got a non-none UnmanagedVector we're about to override. This is a bug because someone has to drop the old one.")
	}

	gm := *(*GasMeter)(unsafe.Pointer(gasMeter))
	state := (*DBState)(unsafe.Pointer(ptr))
	kv := state.Store
	s := copyU8Slice(start)
	e := copyU8Slice(end)

	var iter dbm.Iterator
	gasBefore := gm.GasConsumed()
	switch order {
	case 1: // Ascending
		iter = kv.Iterator(s, e)
	case 2: // Descending
		iter = kv.ReverseIterator(s, e)
	default:
		return ( /*line :284:10*/_Ciconst_GoError_BadArgument /*line :284:30*/)
	}
	gasAfter := gm.GasConsumed()
	*usedGas = ( /*line :287:14*/_Ctype_uint64_t /*line :287:24*/)(gasAfter - gasBefore)

	cIterator, err := buildIterator(state.CallID, iter)
	if err != nil {
		// store the actual error message in the return buffer
		*errOut = newUnmanagedVector([]byte(err.Error()))
		return ( /*line :293:10*/_Ciconst_GoError_User /*line :293:23*/)
	}

	out.state = cIterator
	out.vtable = iterator_vtable
	return ( /*line :298:9*/_Ciconst_GoError_None /*line :298:22*/)
}

//export cNext
func cNext(ref  /*line :302:16*/_Ctype_iterator_t /*line :302:28*/, gasMeter * /*line :302:40*/_Ctype_gas_meter_t /*line :302:53*/, usedGas * /*line :302:64*/_Ctype_uint64_t /*line :302:74*/, key * /*line :302:81*/_Ctype_UnmanagedVector /*line :302:98*/, val * /*line :302:105*/_Ctype_UnmanagedVector /*line :302:122*/, errOut * /*line :302:132*/_Ctype_UnmanagedVector /*line :302:149*/) (ret  /*line :302:156*/_Ctype_GoError /*line :302:165*/) {
	// typical usage of iterator
	// 	for ; itr.Valid(); itr.Next() {
	// 		k, v := itr.Key(); itr.Value()
	// 		...
	// 	}

	defer recoverPanic(&ret)
	if ref.call_id == 0 || gasMeter == nil || usedGas == nil || key == nil || val == nil || errOut == nil {
		// we received an invalid pointer
		return ( /*line :312:10*/_Ciconst_GoError_BadArgument /*line :312:30*/)
	}
	if !(*key).is_none || !(*val).is_none || !(*errOut).is_none {
		panic("Got a non-none UnmanagedVector we're about to override. This is a bug because someone has to drop the old one.")
	}

	gm := *(*GasMeter)(unsafe.Pointer(gasMeter))
	iter := retrieveIterator(uint64(ref.call_id), uint64(ref.iterator_index))
	if iter == nil {
		panic("Unable to retrieve iterator.")
	}
	if !iter.Valid() {
		// end of iterator, return as no-op, nil key is considered end
		return ( /*line :325:10*/_Ciconst_GoError_None /*line :325:23*/)
	}

	gasBefore := gm.GasConsumed()
	// call Next at the end, upon creation we have first data loaded
	k := iter.Key()
	v := iter.Value()
	// check iter.Error() ????
	iter.Next()
	gasAfter := gm.GasConsumed()
	*usedGas = ( /*line :335:14*/_Ctype_uint64_t /*line :335:24*/)(gasAfter - gasBefore)

	*key = newUnmanagedVector(k)
	*val = newUnmanagedVector(v)
	return ( /*line :339:9*/_Ciconst_GoError_None /*line :339:22*/)
}

/***** GoAPI *******/

type (
	HumanizeAddress     func([]byte) (string, uint64, error)
	CanonicalizeAddress func(string) ([]byte, uint64, error)
)

type GoAPI struct {
	HumanAddress     HumanizeAddress
	CanonicalAddress CanonicalizeAddress
}

var api_vtable =  /*line :354:18*/_Ctype_GoApi_vtable /*line :354:32*/{
	humanize_address:     ( /*line :355:25*/_Ctype_humanize_address_fn /*line :355:46*/)(( /*line :355:48*/_Cgo_ptr(_Cfpvar_fp_cHumanAddress_cgo) /*line :355:66*/)),
	canonicalize_address: ( /*line :356:25*/_Ctype_canonicalize_address_fn /*line :356:50*/)(( /*line :356:52*/_Cgo_ptr(_Cfpvar_fp_cCanonicalAddress_cgo) /*line :356:74*/)),
}

// contract: original pointer/struct referenced must live longer than C.GoApi struct
// since this is only used internally, we can verify the code that this is the case
func buildAPI(api *GoAPI)  /*line :361:27*/_Ctype_GoApi /*line :361:34*/ {
	return  /*line :362:9*/_Ctype_GoApi /*line :362:16*/{
		state:  (* /*line :363:13*/_Ctype_api_t /*line :363:20*/)(unsafe.Pointer(api)),
		vtable: api_vtable,
	}
}

//export cHumanAddress
func cHumanAddress(ptr * /*line :369:25*/_Ctype_api_t /*line :369:32*/, src  /*line :369:38*/_Ctype_U8SliceView /*line :369:51*/, dest * /*line :369:59*/_Ctype_UnmanagedVector /*line :369:76*/, errOut * /*line :369:86*/_Ctype_UnmanagedVector /*line :369:103*/, used_gas *cu64) (ret  /*line :369:126*/_Ctype_GoError /*line :369:135*/) {
	defer recoverPanic(&ret)

	if dest == nil || errOut == nil {
		return ( /*line :373:10*/_Ciconst_GoError_BadArgument /*line :373:30*/)
	}
	if !(*dest).is_none || !(*errOut).is_none {
		panic("Got a non-none UnmanagedVector we're about to override. This is a bug because someone has to drop the old one.")
	}

	api := (*GoAPI)(unsafe.Pointer(ptr))
	s := copyU8Slice(src)

	h, cost, err := api.HumanAddress(s)
	*used_gas = cu64(cost)
	if err != nil {
		// store the actual error message in the return buffer
		*errOut = newUnmanagedVector([]byte(err.Error()))
		return ( /*line :387:10*/_Ciconst_GoError_User /*line :387:23*/)
	}
	if len(h) == 0 {
		panic(fmt.Sprintf("`api.HumanAddress()` returned an empty string for %q", s))
	}
	*dest = newUnmanagedVector([]byte(h))
	return ( /*line :393:9*/_Ciconst_GoError_None /*line :393:22*/)
}

//export cCanonicalAddress
func cCanonicalAddress(ptr * /*line :397:29*/_Ctype_api_t /*line :397:36*/, src  /*line :397:42*/_Ctype_U8SliceView /*line :397:55*/, dest * /*line :397:63*/_Ctype_UnmanagedVector /*line :397:80*/, errOut * /*line :397:90*/_Ctype_UnmanagedVector /*line :397:107*/, used_gas *cu64) (ret  /*line :397:130*/_Ctype_GoError /*line :397:139*/) {
	defer recoverPanic(&ret)

	if dest == nil || errOut == nil {
		return ( /*line :401:10*/_Ciconst_GoError_BadArgument /*line :401:30*/)
	}
	if !(*dest).is_none || !(*errOut).is_none {
		panic("Got a non-none UnmanagedVector we're about to override. This is a bug because someone has to drop the old one.")
	}

	api := (*GoAPI)(unsafe.Pointer(ptr))
	s := string(copyU8Slice(src))
	c, cost, err := api.CanonicalAddress(s)
	*used_gas = cu64(cost)
	if err != nil {
		// store the actual error message in the return buffer
		*errOut = newUnmanagedVector([]byte(err.Error()))
		return ( /*line :414:10*/_Ciconst_GoError_User /*line :414:23*/)
	}
	if len(c) == 0 {
		panic(fmt.Sprintf("`api.CanonicalAddress()` returned an empty string for %q", s))
	}
	*dest = newUnmanagedVector(c)
	return ( /*line :420:9*/_Ciconst_GoError_None /*line :420:22*/)
}

/****** Go Querier ********/

var querier_vtable =  /*line :425:22*/_Ctype_Querier_vtable /*line :425:38*/{
	query_external: ( /*line :426:19*/_Ctype_query_external_fn /*line :426:38*/)(( /*line :426:40*/_Cgo_ptr(_Cfpvar_fp_cQueryExternal_cgo) /*line :426:59*/)),
}

// contract: original pointer/struct referenced must live longer than C.GoQuerier struct
// since this is only used internally, we can verify the code that this is the case
func buildQuerier(q *Querier)  /*line :431:31*/_Ctype_GoQuerier /*line :431:42*/ {
	return  /*line :432:9*/_Ctype_GoQuerier /*line :432:20*/{
		state:  (* /*line :433:13*/_Ctype_querier_t /*line :433:24*/)(unsafe.Pointer(q)),
		vtable: querier_vtable,
	}
}

//export cQueryExternal
func cQueryExternal(ptr * /*line :439:26*/_Ctype_querier_t /*line :439:37*/, gasLimit  /*line :439:48*/_Ctype_uint64_t /*line :439:58*/, usedGas * /*line :439:69*/_Ctype_uint64_t /*line :439:79*/, request  /*line :439:89*/_Ctype_U8SliceView /*line :439:102*/, result * /*line :439:112*/_Ctype_UnmanagedVector /*line :439:129*/, errOut * /*line :439:139*/_Ctype_UnmanagedVector /*line :439:156*/) (ret  /*line :439:163*/_Ctype_GoError /*line :439:172*/) {
	defer recoverPanic(&ret)

	if ptr == nil || usedGas == nil || result == nil || errOut == nil {
		// we received an invalid pointer
		return ( /*line :444:10*/_Ciconst_GoError_BadArgument /*line :444:30*/)
	}
	if !(*result).is_none || !(*errOut).is_none {
		panic("Got a non-none UnmanagedVector we're about to override. This is a bug because someone has to drop the old one.")
	}

	// query the data
	querier := *(*Querier)(unsafe.Pointer(ptr))
	req := copyU8Slice(request)

	gasBefore := querier.GasConsumed()
	res := types.RustQuery(querier, req, uint64(gasLimit))
	gasAfter := querier.GasConsumed()
	*usedGas = ( /*line :457:14*/_Ctype_uint64_t /*line :457:24*/)(gasAfter - gasBefore)

	// serialize the response
	bz, err := json.Marshal(res)
	if err != nil {
		*errOut = newUnmanagedVector([]byte(err.Error()))
		return ( /*line :463:10*/_Ciconst_GoError_CannotSerialize /*line :463:34*/)
	}
	*result = newUnmanagedVector(bz)
	return ( /*line :466:9*/_Ciconst_GoError_None /*line :466:22*/)
}
