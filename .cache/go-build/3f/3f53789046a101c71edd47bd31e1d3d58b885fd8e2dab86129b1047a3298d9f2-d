// Code generated by cmd/cgo; DO NOT EDIT.

//line /root/go/pkg/mod/github.com/!cosm!wasm/wasmvm@v1.0.0/api/lib.go:1:1
package api

// #include <stdlib.h>
// #include "bindings.h"
import _ "unsafe"

import (
	"fmt"
	"runtime"
	"syscall"

	"github.com/CosmWasm/wasmvm/types"
)

// Value types
type (
	cint   =  /*line :17:11*/_Ctype_int /*line :17:16*/
	cbool  =  /*line :18:11*/_Ctype_bool /*line :18:17*/
	cusize =  /*line :19:11*/_Ctype_size_t /*line :19:19*/
	cu8    =  /*line :20:11*/_Ctype_uint8_t /*line :20:20*/
	cu32   =  /*line :21:11*/_Ctype_uint32_t /*line :21:21*/
	cu64   =  /*line :22:11*/_Ctype_uint64_t /*line :22:21*/
	ci8    =  /*line :23:11*/_Ctype_int8_t /*line :23:19*/
	ci32   =  /*line :24:11*/_Ctype_int32_t /*line :24:20*/
	ci64   =  /*line :25:11*/_Ctype_int64_t /*line :25:20*/
)

// Pointers
type cu8_ptr = * /*line :29:17*/_Ctype_uint8_t /*line :29:26*/

type Cache struct {
	ptr * /*line :32:7*/_Ctype_cache_t /*line :32:16*/
}

type Querier = types.Querier

func InitCache(dataDir string, supportedFeatures string, cacheSize uint32, instanceMemoryLimit uint32) (Cache, error) {
	dataDirBytes := []byte(dataDir)
	supportedFeaturesBytes := []byte(supportedFeatures)

	d := makeView(dataDirBytes)
	defer runtime.KeepAlive(dataDirBytes)
	f := makeView(supportedFeaturesBytes)
	defer runtime.KeepAlive(supportedFeaturesBytes)

	errmsg := newUnmanagedVector(nil)

	ptr, err := func() (*_Ctype_struct_cache_t, error){ var _cgo0 _Ctype_struct_ByteSliceView = /*line :48:27*/d; var _cgo1 _Ctype_struct_ByteSliceView = /*line :48:30*/f; var _cgo2 _Ctype_uint32_t = /*line :48:33*/cu32(cacheSize); var _cgo3 _Ctype_uint32_t = /*line :48:50*/cu32(instanceMemoryLimit); _cgoBase4 := /*line :48:77*/&errmsg; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgoBase4, 0 == 0); return _C2func_init_cache(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }()
	if err != nil {
		return Cache{}, errorWithMessage(err, errmsg)
	}
	return Cache{ptr: ptr}, nil
}

func ReleaseCache(cache Cache) {
	( /*line :56:2*/_Cfunc_release_cache /*line :56:16*/)(cache.ptr)
}

func Create(cache Cache, wasm []byte) ([]byte, error) {
	w := makeView(wasm)
	defer runtime.KeepAlive(wasm)
	errmsg := newUnmanagedVector(nil)
	checksum, err := func() (_Ctype_struct_UnmanagedVector, error){ var _cgo0 *_Ctype_struct_cache_t = /*line :63:31*/cache.ptr; var _cgo1 _Ctype_struct_ByteSliceView = /*line :63:42*/w; _cgoBase2 := /*line :63:45*/&errmsg; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgoBase2, 0 == 0); return _C2func_save_wasm(_cgo0, _cgo1, _cgo2); }()
	if err != nil {
		return nil, errorWithMessage(err, errmsg)
	}
	return copyAndDestroyUnmanagedVector(checksum), nil
}

func GetCode(cache Cache, checksum []byte) ([]byte, error) {
	cs := makeView(checksum)
	defer runtime.KeepAlive(checksum)
	errmsg := newUnmanagedVector(nil)
	wasm, err := func() (_Ctype_struct_UnmanagedVector, error){ var _cgo0 *_Ctype_struct_cache_t = /*line :74:27*/cache.ptr; var _cgo1 _Ctype_struct_ByteSliceView = /*line :74:38*/cs; _cgoBase2 := /*line :74:42*/&errmsg; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgoBase2, 0 == 0); return _C2func_load_wasm(_cgo0, _cgo1, _cgo2); }()
	if err != nil {
		return nil, errorWithMessage(err, errmsg)
	}
	return copyAndDestroyUnmanagedVector(wasm), nil
}

func Pin(cache Cache, checksum []byte) error {
	cs := makeView(checksum)
	defer runtime.KeepAlive(checksum)
	errmsg := newUnmanagedVector(nil)
	_, err := func() (_Ctype_void, error){ var _cgo0 *_Ctype_struct_cache_t = /*line :85:18*/cache.ptr; var _cgo1 _Ctype_struct_ByteSliceView = /*line :85:29*/cs; _cgoBase2 := /*line :85:33*/&errmsg; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgoBase2, 0 == 0); return _C2func_pin(_cgo0, _cgo1, _cgo2); }()
	if err != nil {
		return errorWithMessage(err, errmsg)
	}
	return nil
}

func Unpin(cache Cache, checksum []byte) error {
	cs := makeView(checksum)
	defer runtime.KeepAlive(checksum)
	errmsg := newUnmanagedVector(nil)
	_, err := func() (_Ctype_void, error){ var _cgo0 *_Ctype_struct_cache_t = /*line :96:20*/cache.ptr; var _cgo1 _Ctype_struct_ByteSliceView = /*line :96:31*/cs; _cgoBase2 := /*line :96:35*/&errmsg; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgoBase2, 0 == 0); return _C2func_unpin(_cgo0, _cgo1, _cgo2); }()
	if err != nil {
		return errorWithMessage(err, errmsg)
	}
	return nil
}

func AnalyzeCode(cache Cache, checksum []byte) (*types.AnalysisReport, error) {
	cs := makeView(checksum)
	defer runtime.KeepAlive(checksum)
	errmsg := newUnmanagedVector(nil)
	report, err := func() (_Ctype_struct_AnalysisReport, error){ var _cgo0 *_Ctype_struct_cache_t = /*line :107:32*/cache.ptr; var _cgo1 _Ctype_struct_ByteSliceView = /*line :107:43*/cs; _cgoBase2 := /*line :107:47*/&errmsg; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgoBase2, 0 == 0); return _C2func_analyze_code(_cgo0, _cgo1, _cgo2); }()
	if err != nil {
		return nil, errorWithMessage(err, errmsg)
	}
	res := types.AnalysisReport{
		HasIBCEntryPoints: bool(report.has_ibc_entry_points),
		RequiredFeatures:  string(copyAndDestroyUnmanagedVector(report.required_features)),
	}
	return &res, nil
}

func GetMetrics(cache Cache) (*types.Metrics, error) {
	errmsg := newUnmanagedVector(nil)
	metrics, err := func() (_Ctype_struct_Metrics, error){ var _cgo0 *_Ctype_struct_cache_t = /*line :120:32*/cache.ptr; _cgoBase1 := /*line :120:43*/&errmsg; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgoBase1, 0 == 0); return _C2func_get_metrics(_cgo0, _cgo1); }()
	if err != nil {
		return nil, errorWithMessage(err, errmsg)
	}

	return &types.Metrics{
		HitsPinnedMemoryCache:     uint32(metrics.hits_pinned_memory_cache),
		HitsMemoryCache:           uint32(metrics.hits_memory_cache),
		HitsFsCache:               uint32(metrics.hits_fs_cache),
		Misses:                    uint32(metrics.misses),
		ElementsPinnedMemoryCache: uint64(metrics.elements_pinned_memory_cache),
		ElementsMemoryCache:       uint64(metrics.elements_memory_cache),
		SizePinnedMemoryCache:     uint64(metrics.size_pinned_memory_cache),
		SizeMemoryCache:           uint64(metrics.size_memory_cache),
	}, nil
}

func Instantiate(
	cache Cache,
	checksum []byte,
	env []byte,
	info []byte,
	msg []byte,
	gasMeter *GasMeter,
	store KVStore,
	api *GoAPI,
	querier *Querier,
	gasLimit uint64,
	printDebug bool,
) ([]byte, uint64, error) {
	cs := makeView(checksum)
	defer runtime.KeepAlive(checksum)
	e := makeView(env)
	defer runtime.KeepAlive(env)
	i := makeView(info)
	defer runtime.KeepAlive(info)
	m := makeView(msg)
	defer runtime.KeepAlive(msg)

	callID := startCall()
	defer endCall(callID)

	dbState := buildDBState(store, callID)
	db := buildDB(&dbState, gasMeter)
	a := buildAPI(api)
	q := buildQuerier(querier)
	var gasUsed cu64
	errmsg := newUnmanagedVector(nil)

	res, err := func() (_Ctype_struct_UnmanagedVector, error){ var _cgo0 *_Ctype_struct_cache_t = /*line :169:28*/cache.ptr; var _cgo1 _Ctype_struct_ByteSliceView = /*line :169:39*/cs; var _cgo2 _Ctype_struct_ByteSliceView = /*line :169:43*/e; var _cgo3 _Ctype_struct_ByteSliceView = /*line :169:46*/i; var _cgo4 _Ctype_struct_ByteSliceView = /*line :169:49*/m; var _cgo5 _Ctype_struct_Db = /*line :169:52*/db; var _cgo6 _Ctype_struct_GoApi = /*line :169:56*/a; var _cgo7 _Ctype_struct_GoQuerier = /*line :169:59*/q; var _cgo8 _Ctype_uint64_t = /*line :169:62*/cu64(gasLimit); var _cgo9 _Ctype__Bool = /*line :169:78*/cbool(printDebug); var _cgo10 *_Ctype_uint64_t = /*line :169:97*/&gasUsed; _cgoBase11 := /*line :169:107*/&errmsg; _cgo11 := _cgoBase11; _cgoCheckPointer(_cgoBase11, 0 == 0); return _C2func_instantiate(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6, _cgo7, _cgo8, _cgo9, _cgo10, _cgo11); }()
	if err != nil && err.(syscall.Errno) != ( /*line :170:42*/_Ciconst_ErrnoValue_Success /*line :170:61*/) {
		// Depending on the nature of the error, `gasUsed` will either have a meaningful value, or just 0.
		return nil, uint64(gasUsed), errorWithMessage(err, errmsg)
	}
	return copyAndDestroyUnmanagedVector(res), uint64(gasUsed), nil
}

func Execute(
	cache Cache,
	checksum []byte,
	env []byte,
	info []byte,
	msg []byte,
	gasMeter *GasMeter,
	store KVStore,
	api *GoAPI,
	querier *Querier,
	gasLimit uint64,
	printDebug bool,
) ([]byte, uint64, error) {
	cs := makeView(checksum)
	defer runtime.KeepAlive(checksum)
	e := makeView(env)
	defer runtime.KeepAlive(env)
	i := makeView(info)
	defer runtime.KeepAlive(info)
	m := makeView(msg)
	defer runtime.KeepAlive(msg)

	callID := startCall()
	defer endCall(callID)

	dbState := buildDBState(store, callID)
	db := buildDB(&dbState, gasMeter)
	a := buildAPI(api)
	q := buildQuerier(querier)
	var gasUsed cu64
	errmsg := newUnmanagedVector(nil)

	res, err := func() (_Ctype_struct_UnmanagedVector, error){ var _cgo0 *_Ctype_struct_cache_t = /*line :209:24*/cache.ptr; var _cgo1 _Ctype_struct_ByteSliceView = /*line :209:35*/cs; var _cgo2 _Ctype_struct_ByteSliceView = /*line :209:39*/e; var _cgo3 _Ctype_struct_ByteSliceView = /*line :209:42*/i; var _cgo4 _Ctype_struct_ByteSliceView = /*line :209:45*/m; var _cgo5 _Ctype_struct_Db = /*line :209:48*/db; var _cgo6 _Ctype_struct_GoApi = /*line :209:52*/a; var _cgo7 _Ctype_struct_GoQuerier = /*line :209:55*/q; var _cgo8 _Ctype_uint64_t = /*line :209:58*/cu64(gasLimit); var _cgo9 _Ctype__Bool = /*line :209:74*/cbool(printDebug); var _cgo10 *_Ctype_uint64_t = /*line :209:93*/&gasUsed; _cgoBase11 := /*line :209:103*/&errmsg; _cgo11 := _cgoBase11; _cgoCheckPointer(_cgoBase11, 0 == 0); return _C2func_execute(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6, _cgo7, _cgo8, _cgo9, _cgo10, _cgo11); }()
	if err != nil && err.(syscall.Errno) != ( /*line :210:42*/_Ciconst_ErrnoValue_Success /*line :210:61*/) {
		// Depending on the nature of the error, `gasUsed` will either have a meaningful value, or just 0.
		return nil, uint64(gasUsed), errorWithMessage(err, errmsg)
	}
	return copyAndDestroyUnmanagedVector(res), uint64(gasUsed), nil
}

func Migrate(
	cache Cache,
	checksum []byte,
	env []byte,
	msg []byte,
	gasMeter *GasMeter,
	store KVStore,
	api *GoAPI,
	querier *Querier,
	gasLimit uint64,
	printDebug bool,
) ([]byte, uint64, error) {
	cs := makeView(checksum)
	defer runtime.KeepAlive(checksum)
	e := makeView(env)
	defer runtime.KeepAlive(env)
	m := makeView(msg)
	defer runtime.KeepAlive(msg)

	callID := startCall()
	defer endCall(callID)

	dbState := buildDBState(store, callID)
	db := buildDB(&dbState, gasMeter)
	a := buildAPI(api)
	q := buildQuerier(querier)
	var gasUsed cu64
	errmsg := newUnmanagedVector(nil)

	res, err := func() (_Ctype_struct_UnmanagedVector, error){ var _cgo0 *_Ctype_struct_cache_t = /*line :246:24*/cache.ptr; var _cgo1 _Ctype_struct_ByteSliceView = /*line :246:35*/cs; var _cgo2 _Ctype_struct_ByteSliceView = /*line :246:39*/e; var _cgo3 _Ctype_struct_ByteSliceView = /*line :246:42*/m; var _cgo4 _Ctype_struct_Db = /*line :246:45*/db; var _cgo5 _Ctype_struct_GoApi = /*line :246:49*/a; var _cgo6 _Ctype_struct_GoQuerier = /*line :246:52*/q; var _cgo7 _Ctype_uint64_t = /*line :246:55*/cu64(gasLimit); var _cgo8 _Ctype__Bool = /*line :246:71*/cbool(printDebug); var _cgo9 *_Ctype_uint64_t = /*line :246:90*/&gasUsed; _cgoBase10 := /*line :246:100*/&errmsg; _cgo10 := _cgoBase10; _cgoCheckPointer(_cgoBase10, 0 == 0); return _C2func_migrate(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6, _cgo7, _cgo8, _cgo9, _cgo10); }()
	if err != nil && err.(syscall.Errno) != ( /*line :247:42*/_Ciconst_ErrnoValue_Success /*line :247:61*/) {
		// Depending on the nature of the error, `gasUsed` will either have a meaningful value, or just 0.
		return nil, uint64(gasUsed), errorWithMessage(err, errmsg)
	}
	return copyAndDestroyUnmanagedVector(res), uint64(gasUsed), nil
}

func Sudo(
	cache Cache,
	checksum []byte,
	env []byte,
	msg []byte,
	gasMeter *GasMeter,
	store KVStore,
	api *GoAPI,
	querier *Querier,
	gasLimit uint64,
	printDebug bool,
) ([]byte, uint64, error) {
	cs := makeView(checksum)
	defer runtime.KeepAlive(checksum)
	e := makeView(env)
	defer runtime.KeepAlive(env)
	m := makeView(msg)
	defer runtime.KeepAlive(msg)

	callID := startCall()
	defer endCall(callID)

	dbState := buildDBState(store, callID)
	db := buildDB(&dbState, gasMeter)
	a := buildAPI(api)
	q := buildQuerier(querier)
	var gasUsed cu64
	errmsg := newUnmanagedVector(nil)

	res, err := func() (_Ctype_struct_UnmanagedVector, error){ var _cgo0 *_Ctype_struct_cache_t = /*line :283:21*/cache.ptr; var _cgo1 _Ctype_struct_ByteSliceView = /*line :283:32*/cs; var _cgo2 _Ctype_struct_ByteSliceView = /*line :283:36*/e; var _cgo3 _Ctype_struct_ByteSliceView = /*line :283:39*/m; var _cgo4 _Ctype_struct_Db = /*line :283:42*/db; var _cgo5 _Ctype_struct_GoApi = /*line :283:46*/a; var _cgo6 _Ctype_struct_GoQuerier = /*line :283:49*/q; var _cgo7 _Ctype_uint64_t = /*line :283:52*/cu64(gasLimit); var _cgo8 _Ctype__Bool = /*line :283:68*/cbool(printDebug); var _cgo9 *_Ctype_uint64_t = /*line :283:87*/&gasUsed; _cgoBase10 := /*line :283:97*/&errmsg; _cgo10 := _cgoBase10; _cgoCheckPointer(_cgoBase10, 0 == 0); return _C2func_sudo(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6, _cgo7, _cgo8, _cgo9, _cgo10); }()
	if err != nil && err.(syscall.Errno) != ( /*line :284:42*/_Ciconst_ErrnoValue_Success /*line :284:61*/) {
		// Depending on the nature of the error, `gasUsed` will either have a meaningful value, or just 0.
		return nil, uint64(gasUsed), errorWithMessage(err, errmsg)
	}
	return copyAndDestroyUnmanagedVector(res), uint64(gasUsed), nil
}

func Reply(
	cache Cache,
	checksum []byte,
	env []byte,
	reply []byte,
	gasMeter *GasMeter,
	store KVStore,
	api *GoAPI,
	querier *Querier,
	gasLimit uint64,
	printDebug bool,
) ([]byte, uint64, error) {
	cs := makeView(checksum)
	defer runtime.KeepAlive(checksum)
	e := makeView(env)
	defer runtime.KeepAlive(env)
	r := makeView(reply)
	defer runtime.KeepAlive(reply)

	callID := startCall()
	defer endCall(callID)

	dbState := buildDBState(store, callID)
	db := buildDB(&dbState, gasMeter)
	a := buildAPI(api)
	q := buildQuerier(querier)
	var gasUsed cu64
	errmsg := newUnmanagedVector(nil)

	res, err := func() (_Ctype_struct_UnmanagedVector, error){ var _cgo0 *_Ctype_struct_cache_t = /*line :320:22*/cache.ptr; var _cgo1 _Ctype_struct_ByteSliceView = /*line :320:33*/cs; var _cgo2 _Ctype_struct_ByteSliceView = /*line :320:37*/e; var _cgo3 _Ctype_struct_ByteSliceView = /*line :320:40*/r; var _cgo4 _Ctype_struct_Db = /*line :320:43*/db; var _cgo5 _Ctype_struct_GoApi = /*line :320:47*/a; var _cgo6 _Ctype_struct_GoQuerier = /*line :320:50*/q; var _cgo7 _Ctype_uint64_t = /*line :320:53*/cu64(gasLimit); var _cgo8 _Ctype__Bool = /*line :320:69*/cbool(printDebug); var _cgo9 *_Ctype_uint64_t = /*line :320:88*/&gasUsed; _cgoBase10 := /*line :320:98*/&errmsg; _cgo10 := _cgoBase10; _cgoCheckPointer(_cgoBase10, 0 == 0); return _C2func_reply(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6, _cgo7, _cgo8, _cgo9, _cgo10); }()
	if err != nil && err.(syscall.Errno) != ( /*line :321:42*/_Ciconst_ErrnoValue_Success /*line :321:61*/) {
		// Depending on the nature of the error, `gasUsed` will either have a meaningful value, or just 0.
		return nil, uint64(gasUsed), errorWithMessage(err, errmsg)
	}
	return copyAndDestroyUnmanagedVector(res), uint64(gasUsed), nil
}

func Query(
	cache Cache,
	checksum []byte,
	env []byte,
	msg []byte,
	gasMeter *GasMeter,
	store KVStore,
	api *GoAPI,
	querier *Querier,
	gasLimit uint64,
	printDebug bool,
) ([]byte, uint64, error) {
	cs := makeView(checksum)
	defer runtime.KeepAlive(checksum)
	e := makeView(env)
	defer runtime.KeepAlive(env)
	m := makeView(msg)
	defer runtime.KeepAlive(msg)

	callID := startCall()
	defer endCall(callID)

	dbState := buildDBState(store, callID)
	db := buildDB(&dbState, gasMeter)
	a := buildAPI(api)
	q := buildQuerier(querier)
	var gasUsed cu64
	errmsg := newUnmanagedVector(nil)

	res, err := func() (_Ctype_struct_UnmanagedVector, error){ var _cgo0 *_Ctype_struct_cache_t = /*line :357:22*/cache.ptr; var _cgo1 _Ctype_struct_ByteSliceView = /*line :357:33*/cs; var _cgo2 _Ctype_struct_ByteSliceView = /*line :357:37*/e; var _cgo3 _Ctype_struct_ByteSliceView = /*line :357:40*/m; var _cgo4 _Ctype_struct_Db = /*line :357:43*/db; var _cgo5 _Ctype_struct_GoApi = /*line :357:47*/a; var _cgo6 _Ctype_struct_GoQuerier = /*line :357:50*/q; var _cgo7 _Ctype_uint64_t = /*line :357:53*/cu64(gasLimit); var _cgo8 _Ctype__Bool = /*line :357:69*/cbool(printDebug); var _cgo9 *_Ctype_uint64_t = /*line :357:88*/&gasUsed; _cgoBase10 := /*line :357:98*/&errmsg; _cgo10 := _cgoBase10; _cgoCheckPointer(_cgoBase10, 0 == 0); return _C2func_query(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6, _cgo7, _cgo8, _cgo9, _cgo10); }()
	if err != nil && err.(syscall.Errno) != ( /*line :358:42*/_Ciconst_ErrnoValue_Success /*line :358:61*/) {
		// Depending on the nature of the error, `gasUsed` will either have a meaningful value, or just 0.
		return nil, uint64(gasUsed), errorWithMessage(err, errmsg)
	}
	return copyAndDestroyUnmanagedVector(res), uint64(gasUsed), nil
}

func IBCChannelOpen(
	cache Cache,
	checksum []byte,
	env []byte,
	msg []byte,
	gasMeter *GasMeter,
	store KVStore,
	api *GoAPI,
	querier *Querier,
	gasLimit uint64,
	printDebug bool,
) ([]byte, uint64, error) {
	cs := makeView(checksum)
	defer runtime.KeepAlive(checksum)
	e := makeView(env)
	defer runtime.KeepAlive(env)
	m := makeView(msg)
	defer runtime.KeepAlive(msg)

	callID := startCall()
	defer endCall(callID)

	dbState := buildDBState(store, callID)
	db := buildDB(&dbState, gasMeter)
	a := buildAPI(api)
	q := buildQuerier(querier)
	var gasUsed cu64
	errmsg := newUnmanagedVector(nil)

	res, err := func() (_Ctype_struct_UnmanagedVector, error){ var _cgo0 *_Ctype_struct_cache_t = /*line :394:33*/cache.ptr; var _cgo1 _Ctype_struct_ByteSliceView = /*line :394:44*/cs; var _cgo2 _Ctype_struct_ByteSliceView = /*line :394:48*/e; var _cgo3 _Ctype_struct_ByteSliceView = /*line :394:51*/m; var _cgo4 _Ctype_struct_Db = /*line :394:54*/db; var _cgo5 _Ctype_struct_GoApi = /*line :394:58*/a; var _cgo6 _Ctype_struct_GoQuerier = /*line :394:61*/q; var _cgo7 _Ctype_uint64_t = /*line :394:64*/cu64(gasLimit); var _cgo8 _Ctype__Bool = /*line :394:80*/cbool(printDebug); var _cgo9 *_Ctype_uint64_t = /*line :394:99*/&gasUsed; _cgoBase10 := /*line :394:109*/&errmsg; _cgo10 := _cgoBase10; _cgoCheckPointer(_cgoBase10, 0 == 0); return _C2func_ibc_channel_open(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6, _cgo7, _cgo8, _cgo9, _cgo10); }()
	if err != nil && err.(syscall.Errno) != ( /*line :395:42*/_Ciconst_ErrnoValue_Success /*line :395:61*/) {
		// Depending on the nature of the error, `gasUsed` will either have a meaningful value, or just 0.
		return nil, uint64(gasUsed), errorWithMessage(err, errmsg)
	}
	return copyAndDestroyUnmanagedVector(res), uint64(gasUsed), nil
}

func IBCChannelConnect(
	cache Cache,
	checksum []byte,
	env []byte,
	msg []byte,
	gasMeter *GasMeter,
	store KVStore,
	api *GoAPI,
	querier *Querier,
	gasLimit uint64,
	printDebug bool,
) ([]byte, uint64, error) {
	cs := makeView(checksum)
	defer runtime.KeepAlive(checksum)
	e := makeView(env)
	defer runtime.KeepAlive(env)
	m := makeView(msg)
	defer runtime.KeepAlive(msg)

	callID := startCall()
	defer endCall(callID)

	dbState := buildDBState(store, callID)
	db := buildDB(&dbState, gasMeter)
	a := buildAPI(api)
	q := buildQuerier(querier)
	var gasUsed cu64
	errmsg := newUnmanagedVector(nil)

	res, err := func() (_Ctype_struct_UnmanagedVector, error){ var _cgo0 *_Ctype_struct_cache_t = /*line :431:36*/cache.ptr; var _cgo1 _Ctype_struct_ByteSliceView = /*line :431:47*/cs; var _cgo2 _Ctype_struct_ByteSliceView = /*line :431:51*/e; var _cgo3 _Ctype_struct_ByteSliceView = /*line :431:54*/m; var _cgo4 _Ctype_struct_Db = /*line :431:57*/db; var _cgo5 _Ctype_struct_GoApi = /*line :431:61*/a; var _cgo6 _Ctype_struct_GoQuerier = /*line :431:64*/q; var _cgo7 _Ctype_uint64_t = /*line :431:67*/cu64(gasLimit); var _cgo8 _Ctype__Bool = /*line :431:83*/cbool(printDebug); var _cgo9 *_Ctype_uint64_t = /*line :431:102*/&gasUsed; _cgoBase10 := /*line :431:112*/&errmsg; _cgo10 := _cgoBase10; _cgoCheckPointer(_cgoBase10, 0 == 0); return _C2func_ibc_channel_connect(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6, _cgo7, _cgo8, _cgo9, _cgo10); }()
	if err != nil && err.(syscall.Errno) != ( /*line :432:42*/_Ciconst_ErrnoValue_Success /*line :432:61*/) {
		// Depending on the nature of the error, `gasUsed` will either have a meaningful value, or just 0.
		return nil, uint64(gasUsed), errorWithMessage(err, errmsg)
	}
	return copyAndDestroyUnmanagedVector(res), uint64(gasUsed), nil
}

func IBCChannelClose(
	cache Cache,
	checksum []byte,
	env []byte,
	msg []byte,
	gasMeter *GasMeter,
	store KVStore,
	api *GoAPI,
	querier *Querier,
	gasLimit uint64,
	printDebug bool,
) ([]byte, uint64, error) {
	cs := makeView(checksum)
	defer runtime.KeepAlive(checksum)
	e := makeView(env)
	defer runtime.KeepAlive(env)
	m := makeView(msg)
	defer runtime.KeepAlive(msg)

	callID := startCall()
	defer endCall(callID)

	dbState := buildDBState(store, callID)
	db := buildDB(&dbState, gasMeter)
	a := buildAPI(api)
	q := buildQuerier(querier)
	var gasUsed cu64
	errmsg := newUnmanagedVector(nil)

	res, err := func() (_Ctype_struct_UnmanagedVector, error){ var _cgo0 *_Ctype_struct_cache_t = /*line :468:34*/cache.ptr; var _cgo1 _Ctype_struct_ByteSliceView = /*line :468:45*/cs; var _cgo2 _Ctype_struct_ByteSliceView = /*line :468:49*/e; var _cgo3 _Ctype_struct_ByteSliceView = /*line :468:52*/m; var _cgo4 _Ctype_struct_Db = /*line :468:55*/db; var _cgo5 _Ctype_struct_GoApi = /*line :468:59*/a; var _cgo6 _Ctype_struct_GoQuerier = /*line :468:62*/q; var _cgo7 _Ctype_uint64_t = /*line :468:65*/cu64(gasLimit); var _cgo8 _Ctype__Bool = /*line :468:81*/cbool(printDebug); var _cgo9 *_Ctype_uint64_t = /*line :468:100*/&gasUsed; _cgoBase10 := /*line :468:110*/&errmsg; _cgo10 := _cgoBase10; _cgoCheckPointer(_cgoBase10, 0 == 0); return _C2func_ibc_channel_close(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6, _cgo7, _cgo8, _cgo9, _cgo10); }()
	if err != nil && err.(syscall.Errno) != ( /*line :469:42*/_Ciconst_ErrnoValue_Success /*line :469:61*/) {
		// Depending on the nature of the error, `gasUsed` will either have a meaningful value, or just 0.
		return nil, uint64(gasUsed), errorWithMessage(err, errmsg)
	}
	return copyAndDestroyUnmanagedVector(res), uint64(gasUsed), nil
}

func IBCPacketReceive(
	cache Cache,
	checksum []byte,
	env []byte,
	packet []byte,
	gasMeter *GasMeter,
	store KVStore,
	api *GoAPI,
	querier *Querier,
	gasLimit uint64,
	printDebug bool,
) ([]byte, uint64, error) {
	cs := makeView(checksum)
	defer runtime.KeepAlive(checksum)
	e := makeView(env)
	defer runtime.KeepAlive(env)
	pa := makeView(packet)
	defer runtime.KeepAlive(packet)

	callID := startCall()
	defer endCall(callID)

	dbState := buildDBState(store, callID)
	db := buildDB(&dbState, gasMeter)
	a := buildAPI(api)
	q := buildQuerier(querier)
	var gasUsed cu64
	errmsg := newUnmanagedVector(nil)

	res, err := func() (_Ctype_struct_UnmanagedVector, error){ var _cgo0 *_Ctype_struct_cache_t = /*line :505:35*/cache.ptr; var _cgo1 _Ctype_struct_ByteSliceView = /*line :505:46*/cs; var _cgo2 _Ctype_struct_ByteSliceView = /*line :505:50*/e; var _cgo3 _Ctype_struct_ByteSliceView = /*line :505:53*/pa; var _cgo4 _Ctype_struct_Db = /*line :505:57*/db; var _cgo5 _Ctype_struct_GoApi = /*line :505:61*/a; var _cgo6 _Ctype_struct_GoQuerier = /*line :505:64*/q; var _cgo7 _Ctype_uint64_t = /*line :505:67*/cu64(gasLimit); var _cgo8 _Ctype__Bool = /*line :505:83*/cbool(printDebug); var _cgo9 *_Ctype_uint64_t = /*line :505:102*/&gasUsed; _cgoBase10 := /*line :505:112*/&errmsg; _cgo10 := _cgoBase10; _cgoCheckPointer(_cgoBase10, 0 == 0); return _C2func_ibc_packet_receive(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6, _cgo7, _cgo8, _cgo9, _cgo10); }()
	if err != nil && err.(syscall.Errno) != ( /*line :506:42*/_Ciconst_ErrnoValue_Success /*line :506:61*/) {
		// Depending on the nature of the error, `gasUsed` will either have a meaningful value, or just 0.
		return nil, uint64(gasUsed), errorWithMessage(err, errmsg)
	}
	return copyAndDestroyUnmanagedVector(res), uint64(gasUsed), nil
}

func IBCPacketAck(
	cache Cache,
	checksum []byte,
	env []byte,
	ack []byte,
	gasMeter *GasMeter,
	store KVStore,
	api *GoAPI,
	querier *Querier,
	gasLimit uint64,
	printDebug bool,
) ([]byte, uint64, error) {
	cs := makeView(checksum)
	defer runtime.KeepAlive(checksum)
	e := makeView(env)
	defer runtime.KeepAlive(env)
	ac := makeView(ack)
	defer runtime.KeepAlive(ack)

	callID := startCall()
	defer endCall(callID)

	dbState := buildDBState(store, callID)
	db := buildDB(&dbState, gasMeter)
	a := buildAPI(api)
	q := buildQuerier(querier)
	var gasUsed cu64
	errmsg := newUnmanagedVector(nil)

	res, err := func() (_Ctype_struct_UnmanagedVector, error){ var _cgo0 *_Ctype_struct_cache_t = /*line :542:31*/cache.ptr; var _cgo1 _Ctype_struct_ByteSliceView = /*line :542:42*/cs; var _cgo2 _Ctype_struct_ByteSliceView = /*line :542:46*/e; var _cgo3 _Ctype_struct_ByteSliceView = /*line :542:49*/ac; var _cgo4 _Ctype_struct_Db = /*line :542:53*/db; var _cgo5 _Ctype_struct_GoApi = /*line :542:57*/a; var _cgo6 _Ctype_struct_GoQuerier = /*line :542:60*/q; var _cgo7 _Ctype_uint64_t = /*line :542:63*/cu64(gasLimit); var _cgo8 _Ctype__Bool = /*line :542:79*/cbool(printDebug); var _cgo9 *_Ctype_uint64_t = /*line :542:98*/&gasUsed; _cgoBase10 := /*line :542:108*/&errmsg; _cgo10 := _cgoBase10; _cgoCheckPointer(_cgoBase10, 0 == 0); return _C2func_ibc_packet_ack(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6, _cgo7, _cgo8, _cgo9, _cgo10); }()
	if err != nil && err.(syscall.Errno) != ( /*line :543:42*/_Ciconst_ErrnoValue_Success /*line :543:61*/) {
		// Depending on the nature of the error, `gasUsed` will either have a meaningful value, or just 0.
		return nil, uint64(gasUsed), errorWithMessage(err, errmsg)
	}
	return copyAndDestroyUnmanagedVector(res), uint64(gasUsed), nil
}

func IBCPacketTimeout(
	cache Cache,
	checksum []byte,
	env []byte,
	packet []byte,
	gasMeter *GasMeter,
	store KVStore,
	api *GoAPI,
	querier *Querier,
	gasLimit uint64,
	printDebug bool,
) ([]byte, uint64, error) {
	cs := makeView(checksum)
	defer runtime.KeepAlive(checksum)
	e := makeView(env)
	defer runtime.KeepAlive(env)
	pa := makeView(packet)
	defer runtime.KeepAlive(packet)

	callID := startCall()
	defer endCall(callID)

	dbState := buildDBState(store, callID)
	db := buildDB(&dbState, gasMeter)
	a := buildAPI(api)
	q := buildQuerier(querier)
	var gasUsed cu64
	errmsg := newUnmanagedVector(nil)

	res, err := func() (_Ctype_struct_UnmanagedVector, error){ var _cgo0 *_Ctype_struct_cache_t = /*line :579:35*/cache.ptr; var _cgo1 _Ctype_struct_ByteSliceView = /*line :579:46*/cs; var _cgo2 _Ctype_struct_ByteSliceView = /*line :579:50*/e; var _cgo3 _Ctype_struct_ByteSliceView = /*line :579:53*/pa; var _cgo4 _Ctype_struct_Db = /*line :579:57*/db; var _cgo5 _Ctype_struct_GoApi = /*line :579:61*/a; var _cgo6 _Ctype_struct_GoQuerier = /*line :579:64*/q; var _cgo7 _Ctype_uint64_t = /*line :579:67*/cu64(gasLimit); var _cgo8 _Ctype__Bool = /*line :579:83*/cbool(printDebug); var _cgo9 *_Ctype_uint64_t = /*line :579:102*/&gasUsed; _cgoBase10 := /*line :579:112*/&errmsg; _cgo10 := _cgoBase10; _cgoCheckPointer(_cgoBase10, 0 == 0); return _C2func_ibc_packet_timeout(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4, _cgo5, _cgo6, _cgo7, _cgo8, _cgo9, _cgo10); }()
	if err != nil && err.(syscall.Errno) != ( /*line :580:42*/_Ciconst_ErrnoValue_Success /*line :580:61*/) {
		// Depending on the nature of the error, `gasUsed` will either have a meaningful value, or just 0.
		return nil, uint64(gasUsed), errorWithMessage(err, errmsg)
	}
	return copyAndDestroyUnmanagedVector(res), uint64(gasUsed), nil
}

/**** To error module ***/

func errorWithMessage(err error, b  /*line :589:36*/_Ctype_UnmanagedVector /*line :589:53*/) error {
	// this checks for out of gas as a special case
	if errno, ok := err.(syscall.Errno); ok && int(errno) == 2 {
		return types.OutOfGasError{}
	}
	msg := copyAndDestroyUnmanagedVector(b)
	if msg == nil {
		return err
	}
	return fmt.Errorf("%s", string(msg))
}
