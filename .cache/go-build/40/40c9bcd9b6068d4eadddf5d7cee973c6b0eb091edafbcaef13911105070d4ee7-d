//go:cgo_ldflag "-g"
//go:cgo_ldflag "-O2"
//go:cgo_ldflag "-lrt"
// Code generated by cmd/cgo; DO NOT EDIT.

package hid

import "unsafe"

import _ "runtime/cgo"

import "syscall"

var _ syscall.Errno
func _Cgo_ptr(ptr unsafe.Pointer) unsafe.Pointer { return ptr }

//go:linkname _Cgo_always_false runtime.cgoAlwaysFalse
var _Cgo_always_false bool
//go:linkname _Cgo_use runtime.cgoUse
func _Cgo_use(interface{})
type _Ctype__GoString_ string

type _Ctype___pthread_list_t = _Ctype_struct___pthread_internal_list

type _Ctype___uint16_t = _Ctype_ushort

type _Ctype___uint8_t = _Ctype_uchar

type _Ctype_char int8

type _Ctype_hid_device = _Ctype_struct_hid_device_

type _Ctype_int int32

type _Ctype_intgo = _Ctype_ptrdiff_t

type _Ctype_libusb_device_handle = _Ctype_struct_libusb_device_handle

type _Ctype_libusb_pollfd_added_cb *[0]byte

type _Ctype_libusb_pollfd_removed_cb *[0]byte

type _Ctype_libusb_transfer_cb_fn *[0]byte

type _Ctype_long int64

type _Ctype_pthread_barrier_t [32]byte

type _Ctype_pthread_cond_t [48]byte

type _Ctype_pthread_key_t = _Ctype_uint

type _Ctype_pthread_mutex_t [40]byte

type _Ctype_pthread_t = _Ctype_ulong

type _Ctype_ptrdiff_t = _Ctype_long

type _Ctype_short int16

type _Ctype_size_t = _Ctype_ulong

type _Ctype_struct___pthread_internal_list struct {
	__prev	*_Ctype_struct___pthread_internal_list
	__next	*_Ctype_struct___pthread_internal_list
}

type _Ctype_struct_hid_device_ struct {
	device_handle			*_Ctype_struct_libusb_device_handle
	input_endpoint			_Ctype_int
	output_endpoint			_Ctype_int
	input_ep_max_packet_size	_Ctype_int
	_interface			_Ctype_int
	manufacturer_index		_Ctype_int
	product_index			_Ctype_int
	serial_index			_Ctype_int
	blocking			_Ctype_int
	thread				_Ctype_pthread_t
	mutex				_Ctype_pthread_mutex_t
	condition			_Ctype_pthread_cond_t
	barrier				_Ctype_pthread_barrier_t
	shutdown_thread			_Ctype_int
	cancelled			_Ctype_int
	transfer			*_Ctype_struct_libusb_transfer
	input_reports			*_Ctype_struct_input_report
}

type _Ctype_struct_hid_device_info struct {
	path			*_Ctype_char
	vendor_id		_Ctype_ushort
	product_id		_Ctype_ushort
	serial_number		*_Ctype_wchar_t
	release_number		_Ctype_ushort
	manufacturer_string	*_Ctype_wchar_t
	product_string		*_Ctype_wchar_t
	usage_page		_Ctype_ushort
	usage			_Ctype_ushort
	interface_number	_Ctype_int
	next			*_Ctype_struct_hid_device_info
}

type _Ctype_struct_input_report struct {
	data	*_Ctype_uint8_t
	len	_Ctype_size_t
	next	*_Ctype_struct_input_report
}

type _Ctype_struct_libusb_context struct {
	debug			_Ctype_int
	debug_fixed		_Ctype_int
	event_pipe		[2]_Ctype_int
	usb_devs		_Ctype_struct_list_head
	usb_devs_lock		_Ctype_pthread_mutex_t
	open_devs		_Ctype_struct_list_head
	open_devs_lock		_Ctype_pthread_mutex_t
	hotplug_cbs		_Ctype_struct_list_head
	hotplug_cbs_lock	_Ctype_pthread_mutex_t
	flying_transfers	_Ctype_struct_list_head
	flying_transfers_lock	_Ctype_pthread_mutex_t
	fd_added_cb		_Ctype_libusb_pollfd_added_cb
	fd_removed_cb		_Ctype_libusb_pollfd_removed_cb
	fd_cb_user_data		unsafe.Pointer
	events_lock		_Ctype_pthread_mutex_t
	event_handler_active	_Ctype_int
	event_handling_key	_Ctype_pthread_key_t
	event_waiters_lock	_Ctype_pthread_mutex_t
	event_waiters_cond	_Ctype_pthread_cond_t
	event_data_lock		_Ctype_pthread_mutex_t
	event_flags		_Ctype_uint
	device_close		_Ctype_uint
	ipollfds		_Ctype_struct_list_head
	pollfds			*_Ctype_struct_pollfd
	pollfds_cnt		_Ctype_int
	hotplug_msgs		_Ctype_struct_list_head
	completed_transfers	_Ctype_struct_list_head
	list			_Ctype_struct_list_head
}

type _Ctype_struct_libusb_device struct {
	lock			_Ctype_pthread_mutex_t
	refcnt			_Ctype_int
	ctx			*_Ctype_struct_libusb_context
	bus_number		_Ctype_uint8_t
	port_number		_Ctype_uint8_t
	parent_dev		*_Ctype_struct_libusb_device
	device_address		_Ctype_uint8_t
	num_configurations	_Ctype_uint8_t
	speed			uint32
	list			_Ctype_struct_list_head
	session_data		_Ctype_ulong
	device_descriptor	_Ctype_struct_libusb_device_descriptor
	attached		_Ctype_int
}

type _Ctype_struct_libusb_device_descriptor struct {
	bLength			_Ctype_uint8_t
	bDescriptorType		_Ctype_uint8_t
	bcdUSB			_Ctype_uint16_t
	bDeviceClass		_Ctype_uint8_t
	bDeviceSubClass		_Ctype_uint8_t
	bDeviceProtocol		_Ctype_uint8_t
	bMaxPacketSize0		_Ctype_uint8_t
	idVendor		_Ctype_uint16_t
	idProduct		_Ctype_uint16_t
	bcdDevice		_Ctype_uint16_t
	iManufacturer		_Ctype_uint8_t
	iProduct		_Ctype_uint8_t
	iSerialNumber		_Ctype_uint8_t
	bNumConfigurations	_Ctype_uint8_t
}

type _Ctype_struct_libusb_device_handle struct {
	lock				_Ctype_pthread_mutex_t
	claimed_interfaces		_Ctype_ulong
	list				_Ctype_struct_list_head
	dev				*_Ctype_struct_libusb_device
	auto_detach_kernel_driver	_Ctype_int
	os_priv				[0]_Ctype_uchar
	_				[4]byte
}

type _Ctype_struct_libusb_iso_packet_descriptor struct {
	length		_Ctype_uint
	actual_length	_Ctype_uint
	status		uint32
}

type _Ctype_struct_libusb_transfer struct {
	dev_handle	*_Ctype_struct_libusb_device_handle
	flags		_Ctype_uint8_t
	endpoint	_Ctype_uchar
	_type		_Ctype_uchar
	timeout		_Ctype_uint
	status		uint32
	length		_Ctype_int
	actual_length	_Ctype_int
	callback	_Ctype_libusb_transfer_cb_fn
	user_data	unsafe.Pointer
	buffer		*_Ctype_uchar
	num_iso_packets	_Ctype_int
	iso_packet_desc	[0]_Ctype_struct_libusb_iso_packet_descriptor
	_		[4]byte
}

type _Ctype_struct_list_head struct {
	prev	*_Ctype_struct_list_head
	next	*_Ctype_struct_list_head
}

type _Ctype_struct_pollfd struct {
	fd	_Ctype_int
	events	_Ctype_short
	revents	_Ctype_short
}

type _Ctype_uchar uint8

type _Ctype_uint uint32

type _Ctype_uint16_t = _Ctype___uint16_t

type _Ctype_uint8_t = _Ctype___uint8_t

type _Ctype_ulong uint64

type _Ctype_union___0 = [40]byte

type _Ctype_union___1 = [48]byte

type _Ctype_union___2 = [32]byte

type _Ctype_ushort uint16

type _Ctype_wchar_t = _Ctype_int

//go:notinheap
type _Ctype_void_notinheap struct{}

type _Ctype_void [0]byte

//go:linkname _cgo_runtime_cgocall runtime.cgocall
func _cgo_runtime_cgocall(unsafe.Pointer, uintptr) int32

//go:linkname _cgoCheckPointer runtime.cgoCheckPointer
func _cgoCheckPointer(interface{}, interface{})

//go:linkname _cgoCheckResult runtime.cgoCheckResult
func _cgoCheckResult(interface{})
//go:linkname __cgo_SIZEOF_WCHAR_T SIZEOF_WCHAR_T
//go:cgo_import_static SIZEOF_WCHAR_T
var __cgo_SIZEOF_WCHAR_T byte
var _Cvar_SIZEOF_WCHAR_T *_Ctype_size_t = (*_Ctype_size_t)(unsafe.Pointer(&__cgo_SIZEOF_WCHAR_T))


func _Cfunc_CString(s string) *_Ctype_char {
	p := _cgo_cmalloc(uint64(len(s)+1))
	pp := (*[1<<30]byte)(p)
	copy(pp[:], s)
	pp[len(s)] = 0
	return (*_Ctype_char)(p)
}

//go:linkname _cgo_runtime_gostring runtime.gostring
func _cgo_runtime_gostring(*_Ctype_char) string

func _Cfunc_GoString(p *_Ctype_char) string {
	return _cgo_runtime_gostring(p)
}

func _Cfunc__CMalloc(n _Ctype_size_t) unsafe.Pointer {
	return _cgo_cmalloc(uint64(n))
}
//go:cgo_import_static _cgo_0bb83ce3ea97_Cfunc_free
//go:linkname __cgofn__cgo_0bb83ce3ea97_Cfunc_free _cgo_0bb83ce3ea97_Cfunc_free
var __cgofn__cgo_0bb83ce3ea97_Cfunc_free byte
var _cgo_0bb83ce3ea97_Cfunc_free = unsafe.Pointer(&__cgofn__cgo_0bb83ce3ea97_Cfunc_free)

//go:cgo_unsafe_args
func _Cfunc_free(p0 unsafe.Pointer) (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_0bb83ce3ea97_Cfunc_free, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
//go:cgo_import_static _cgo_0bb83ce3ea97_Cfunc_gowchar_get
//go:linkname __cgofn__cgo_0bb83ce3ea97_Cfunc_gowchar_get _cgo_0bb83ce3ea97_Cfunc_gowchar_get
var __cgofn__cgo_0bb83ce3ea97_Cfunc_gowchar_get byte
var _cgo_0bb83ce3ea97_Cfunc_gowchar_get = unsafe.Pointer(&__cgofn__cgo_0bb83ce3ea97_Cfunc_gowchar_get)

//go:cgo_unsafe_args
func _Cfunc_gowchar_get(p0 *_Ctype_wchar_t, p1 _Ctype_int) (r1 _Ctype_wchar_t) {
	_cgo_runtime_cgocall(_cgo_0bb83ce3ea97_Cfunc_gowchar_get, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
	}
	return
}
//go:cgo_import_static _cgo_0bb83ce3ea97_Cfunc_gowchar_set
//go:linkname __cgofn__cgo_0bb83ce3ea97_Cfunc_gowchar_set _cgo_0bb83ce3ea97_Cfunc_gowchar_set
var __cgofn__cgo_0bb83ce3ea97_Cfunc_gowchar_set byte
var _cgo_0bb83ce3ea97_Cfunc_gowchar_set = unsafe.Pointer(&__cgofn__cgo_0bb83ce3ea97_Cfunc_gowchar_set)

//go:cgo_unsafe_args
func _Cfunc_gowchar_set(p0 *_Ctype_wchar_t, p1 _Ctype_int, p2 _Ctype_wchar_t) (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_0bb83ce3ea97_Cfunc_gowchar_set, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
		_Cgo_use(p2)
	}
	return
}
//go:cgo_import_static _cgo_0bb83ce3ea97_Cfunc_hid_close
//go:linkname __cgofn__cgo_0bb83ce3ea97_Cfunc_hid_close _cgo_0bb83ce3ea97_Cfunc_hid_close
var __cgofn__cgo_0bb83ce3ea97_Cfunc_hid_close byte
var _cgo_0bb83ce3ea97_Cfunc_hid_close = unsafe.Pointer(&__cgofn__cgo_0bb83ce3ea97_Cfunc_hid_close)

//go:cgo_unsafe_args
func _Cfunc_hid_close(p0 *_Ctype_struct_hid_device_) (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_0bb83ce3ea97_Cfunc_hid_close, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
//go:cgo_import_static _cgo_0bb83ce3ea97_Cfunc_hid_enumerate
//go:linkname __cgofn__cgo_0bb83ce3ea97_Cfunc_hid_enumerate _cgo_0bb83ce3ea97_Cfunc_hid_enumerate
var __cgofn__cgo_0bb83ce3ea97_Cfunc_hid_enumerate byte
var _cgo_0bb83ce3ea97_Cfunc_hid_enumerate = unsafe.Pointer(&__cgofn__cgo_0bb83ce3ea97_Cfunc_hid_enumerate)

//go:cgo_unsafe_args
func _Cfunc_hid_enumerate(p0 _Ctype_ushort, p1 _Ctype_ushort) (r1 *_Ctype_struct_hid_device_info) {
	_cgo_runtime_cgocall(_cgo_0bb83ce3ea97_Cfunc_hid_enumerate, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
	}
	return
}
//go:cgo_import_static _cgo_0bb83ce3ea97_Cfunc_hid_error
//go:linkname __cgofn__cgo_0bb83ce3ea97_Cfunc_hid_error _cgo_0bb83ce3ea97_Cfunc_hid_error
var __cgofn__cgo_0bb83ce3ea97_Cfunc_hid_error byte
var _cgo_0bb83ce3ea97_Cfunc_hid_error = unsafe.Pointer(&__cgofn__cgo_0bb83ce3ea97_Cfunc_hid_error)

//go:cgo_unsafe_args
func _Cfunc_hid_error(p0 *_Ctype_struct_hid_device_) (r1 *_Ctype_wchar_t) {
	_cgo_runtime_cgocall(_cgo_0bb83ce3ea97_Cfunc_hid_error, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
//go:cgo_import_static _cgo_0bb83ce3ea97_Cfunc_hid_free_enumeration
//go:linkname __cgofn__cgo_0bb83ce3ea97_Cfunc_hid_free_enumeration _cgo_0bb83ce3ea97_Cfunc_hid_free_enumeration
var __cgofn__cgo_0bb83ce3ea97_Cfunc_hid_free_enumeration byte
var _cgo_0bb83ce3ea97_Cfunc_hid_free_enumeration = unsafe.Pointer(&__cgofn__cgo_0bb83ce3ea97_Cfunc_hid_free_enumeration)

//go:cgo_unsafe_args
func _Cfunc_hid_free_enumeration(p0 *_Ctype_struct_hid_device_info) (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_0bb83ce3ea97_Cfunc_hid_free_enumeration, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
//go:cgo_import_static _cgo_0bb83ce3ea97_Cfunc_hid_open_path
//go:linkname __cgofn__cgo_0bb83ce3ea97_Cfunc_hid_open_path _cgo_0bb83ce3ea97_Cfunc_hid_open_path
var __cgofn__cgo_0bb83ce3ea97_Cfunc_hid_open_path byte
var _cgo_0bb83ce3ea97_Cfunc_hid_open_path = unsafe.Pointer(&__cgofn__cgo_0bb83ce3ea97_Cfunc_hid_open_path)

//go:cgo_unsafe_args
func _Cfunc_hid_open_path(p0 *_Ctype_char) (r1 *_Ctype_struct_hid_device_) {
	_cgo_runtime_cgocall(_cgo_0bb83ce3ea97_Cfunc_hid_open_path, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
//go:cgo_import_static _cgo_0bb83ce3ea97_Cfunc_hid_read
//go:linkname __cgofn__cgo_0bb83ce3ea97_Cfunc_hid_read _cgo_0bb83ce3ea97_Cfunc_hid_read
var __cgofn__cgo_0bb83ce3ea97_Cfunc_hid_read byte
var _cgo_0bb83ce3ea97_Cfunc_hid_read = unsafe.Pointer(&__cgofn__cgo_0bb83ce3ea97_Cfunc_hid_read)

//go:cgo_unsafe_args
func _Cfunc_hid_read(p0 *_Ctype_struct_hid_device_, p1 *_Ctype_uchar, p2 _Ctype_size_t) (r1 _Ctype_int) {
	_cgo_runtime_cgocall(_cgo_0bb83ce3ea97_Cfunc_hid_read, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
		_Cgo_use(p2)
	}
	return
}
//go:cgo_import_static _cgo_0bb83ce3ea97_Cfunc_hid_write
//go:linkname __cgofn__cgo_0bb83ce3ea97_Cfunc_hid_write _cgo_0bb83ce3ea97_Cfunc_hid_write
var __cgofn__cgo_0bb83ce3ea97_Cfunc_hid_write byte
var _cgo_0bb83ce3ea97_Cfunc_hid_write = unsafe.Pointer(&__cgofn__cgo_0bb83ce3ea97_Cfunc_hid_write)

//go:cgo_unsafe_args
func _Cfunc_hid_write(p0 *_Ctype_struct_hid_device_, p1 *_Ctype_uchar, p2 _Ctype_size_t) (r1 _Ctype_int) {
	_cgo_runtime_cgocall(_cgo_0bb83ce3ea97_Cfunc_hid_write, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
		_Cgo_use(p2)
	}
	return
}

//go:cgo_import_static _cgo_0bb83ce3ea97_Cfunc__Cmalloc
//go:linkname __cgofn__cgo_0bb83ce3ea97_Cfunc__Cmalloc _cgo_0bb83ce3ea97_Cfunc__Cmalloc
var __cgofn__cgo_0bb83ce3ea97_Cfunc__Cmalloc byte
var _cgo_0bb83ce3ea97_Cfunc__Cmalloc = unsafe.Pointer(&__cgofn__cgo_0bb83ce3ea97_Cfunc__Cmalloc)

//go:linkname runtime_throw runtime.throw
func runtime_throw(string)

//go:cgo_unsafe_args
func _cgo_cmalloc(p0 uint64) (r1 unsafe.Pointer) {
	_cgo_runtime_cgocall(_cgo_0bb83ce3ea97_Cfunc__Cmalloc, uintptr(unsafe.Pointer(&p0)))
	if r1 == nil {
		runtime_throw("runtime: C malloc failed")
	}
	return
}
